 version: 2.1
 
 executors:
   test-environment:  
     docker:
       - image: circleci/python:3.6.2-stretch
         environment:
           TEST_DATABASE_URL: postgresql://root@127.0.0.1:5432/circle_test
       - image: circleci/postgres:9.6.5-alpine-ram
         environment:
            POSTGRES_USER: root
            POSTGRES_DB: circle_test
   production-environment:
     docker:
       - image: buildpack-deps:trusty
 
 jobs:
   prepare-environment:
     executor: test-environment
     steps:
       - checkout 
       - run:
           command: |
             sudo chown -R circleci:circleci /usr/local/bin
             sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
       - run:
           command: |
             sudo apt-get update
             sudo apt-get install -y postgresql-client-9.6
             psql -d $TEST_DATABASE_URL -c 'create database taiga;' -U root
       - restore_cache:
           key: taiga-back-{{ checksum "requirements.txt" }}
       - run: 
           command: |
             pip install -r requirements.txt
             sudo apt-get install -y build-essential binutils-doc autoconf flex bison libjpeg-dev
             sudo apt-get install -y libfreetype6-dev zlib1g-dev libzmq3-dev libgdbm-dev libncurses5-dev
             sudo apt-get install -y automake libtool libffi-dev libssl-dev curl git tmux gettext
             #python manage.py runserver --settings=settings.testing
             python manage.py migrate --noinput --settings=settings.testing
             python manage.py loaddata initial_user --settings=settings.testing
             python manage.py loaddata initial_project_templates --settings=settings.testing
             python manage.py compilemessages --settings=settings.testing
             python manage.py collectstatic --noinput --settings=settings.testing
             python manage.py sample_data --settings=settings.testing
       - save_cache:
           key: taiga-back-{{ checksum "requirements.txt" }}
           paths:
             - "/usr/local/lib/python3.6/site-packages"
             - "/usr/local/bin"
#    smoke-test:
   code-quality:
     executor: test-environment
     steps:
       - checkout
       - run:
           command: |
             sudo chown -R circleci:circleci /usr/local/bin
             sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
       - restore_cache:
           key: taiga-back-{{ checksum "requirements.txt" }}
       - run: 
           name: run unit tests
           command: |
             pip install flake8
             mkdir -p test-results
             flake8 --config setup.cfg --format junit-xml --tee --output-file=test-results/junit.xml
       - store_test_results:
           path: test-results
       - store_artifacts:
          path: test-reports
   unit-test:
     executor: test-environment
     steps:
       - checkout
       - run:
           command: |
             sudo chown -R circleci:circleci /usr/local/bin
             sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
       - restore_cache:
           key: taiga-back-{{ checksum "requirements.txt" }}
       - run: 
           name: run unit tests
           command: |
             mkdir test-reports
             coverage run --source=taiga --omit='*tests*,*commands*,*migrations*,*admin*,*.jinja,*dashboard*,*settings*,*wsgi*,*questions*,*documents*' -m pytest -v --tb=native --junitxml=test-reports/junit.xml --disable-pytest-warnings tests/unit
       - store_test_results:
          path: test-reports
       - store_artifacts:
          path: test-reports
   integration-test:
     executor: test-environment
     steps:
       - checkout
       - run:
           command: |
             sudo chown -R circleci:circleci /usr/local/bin
             sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
       - restore_cache:
           key: taiga-back-{{ checksum "requirements.txt" }}
       - run: 
           name: run integration tests
           command: |
             mkdir test-reports
             coverage run --source=taiga --omit='*tests*,*commands*,*migrations*,*admin*,*.jinja,*dashboard*,*settings*,*wsgi*,*questions*,*documents*' -m pytest -v --tb=native --junitxml=test-reports/junit.xml --disable-pytest-warnings tests/integration
       - store_test_results:
          path: test-reports
       - store_artifacts:
          path: test-reports
   deploy:
     executor: production-environment
     steps:
       - checkout
       - run:
           name: deploy to master
           command: |
             git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

 workflows:
   version: 2.1
   build-deploy:
     jobs:
       - prepare-environment
       - code-quality:
           requires:
             - prepare-environment
       - unit-test:
           requires:
             - code-quality
       - integration-test:
           requires:
             - unit-test
       - deploy:
           requires:
             - integration-test
           
